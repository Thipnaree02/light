#include <Wire.h>              // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ I2C
#include <WiFi.h>              // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi
#include <WiFiClient.h>        // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi Client
#include <BlynkSimpleEsp32.h>  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Blynk Server *‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Blynk version 0.60 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
#include <DHT.h>               // ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå DHT (‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô)
#include <HTTPClient.h>        // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á HTTP Request
#include <WiFiManager.h>       // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° WiFiManager

// Wi-Fi and Blynk credentials
const char ssid[] = "Internet.of.thipnaree";      // Your Wi-Fi SSID
const char pass[] = "123456789";  // Your Wi-Fi password
const char auth[] = "lGi7s9Kl1q3b9SAJMK-QKwLgB5I0bOhS"; // Auth token from Blynk app

// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Token ‡πÅ‡∏•‡∏∞ Chat ID ‡∏´‡∏£‡∏∑‡∏≠ Chat ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
const char* botToken = "7547625655:AAGBM8wOexys1hwLimBc-Afr3RVCC3RPLvo";  //Telegram HTTP API Token
const char* chatID = "-4773459198";                                       //Chat ID ‡∏´‡∏£‡∏∑‡∏≠ Chat ID ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°

float tempThreshold = 20.0;      // ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 30¬∞C)

// GPIO configuration
#define LDR_PIN 34  // GPIO34 connected to LDR sensor
#define DHTPIN 15   // GPIO15 connected to DHT sensor
#define DHTTYPE DHT22 // DHT type: DHT11 or DHT22

// Create DHT instance
DHT dht(DHTPIN, DHTTYPE);

// Timer for periodic tasks
BlynkTimer timer;

// Function prototypes
void readSensors();


// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram
unsigned long lastTelegramSent = 0;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const unsigned long TELEGRAM_COOLDOWN = 900000;  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ (900000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)


void sendTelegramMessage(String alertType, float value) {
    if (WiFi.status() != WL_CONNECTED) return;
    // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (millis() - lastTelegramSent < TELEGRAM_COOLDOWN) return;  

    HTTPClient http;
    String url = "https://api.telegram.org/bot" + String(botToken) + "/sendMessage";
    http.begin(url);
    http.addHeader("Content-Type", "application/json");

    String message = "{\"chat_id\":\"" + String(chatID) + "\",\"text\":\"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: " 
                     + alertType + "\\n‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " + String(value) + "\"}";

    int httpResponseCode = http.POST(message);
    
    if (httpResponseCode > 0) {
        Serial.println("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
        Serial.print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ");
        Serial.println(httpResponseCode);
    }

    http.end();
    lastTelegramSent = millis();  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
}


void setup() {
  Serial.begin(9600);
  pinMode(LDR_PIN, INPUT);

  dht.begin();

  Serial.print("Connecting to Wi-Fi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi connected");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  Serial.println("Connecting to Blynk server...");
  Blynk.begin(auth, ssid, pass, "iotservices.thddns.net", 5535);  //‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Blynk Public Server 

  timer.setInterval(2000L, readSensors);   // Read sensors every 2 seconds
}

BLYNK_CONNECTED() {
  Serial.println("Blynk connected!");
  Blynk.syncAll();
  Serial.println("LED state set to: ON (forced ON after connection)");
}



void loop() {
    if (Blynk.connected()) {
        Blynk.run();
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô readSensors ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    readSensors();

    delay(1000);
}

void readSensors() {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á
    int lightValue = analogRead(LDR_PIN);
    float lightPercentage = (lightValue / 4095.0) * 100.0;
    Blynk.virtualWrite(V3, lightPercentage);

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NaN
    if (!isnan(temperature) && !isnan(humidity)) {
        Blynk.virtualWrite(V1, temperature);
        Blynk.virtualWrite(V2, humidity);
        Serial.printf("üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: %.2f ¬∞C, üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: %.2f %%, üí° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á: %.2f%%\n", 
                      temperature, humidity, lightPercentage);
    }

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram
    if (lightPercentage > 80.0) {  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà 80%
        sendTelegramMessage("üí° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏™‡∏á‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î!", lightPercentage);
    }
    if (temperature > 25.0) {
        sendTelegramMessage("üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 25¬∞C", temperature);
    }
    if (humidity < 40.0) {
        sendTelegramMessage("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô 40%", humidity);
    }
}

float measureLightIntensity() {
    int lightValue = analogRead(LDR_PIN);
    return (lightValue / 4095.0) * 100.0;
}


